name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  submodule_cache:
    name: Initialize submodule cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Remove unneeded frameworks to recover disk space
        run: sudo ./.github/cleanup-rootfs.sh

      - name: Checkout required submodules
        run: git submodule update --init -j $(nproc) --depth 1 binutils gcc gdb glibc llvm musl newlib uclibc-ng qemu dejagnu

      - name: Storage size optimization
        run: |
          git submodule foreach 'git maintenance run'

      - name: Setup submodule cache
        uses: actions/cache@v4
        with:
          path: |
            binutils
            gcc
            gdb
            glibc
            llvm
            musl
            newlib
            uclibc-ng
            qemu
            dejagnu
            .git/modules
          key: submodule-cache-${{ github.run_id }}-${{ github.run_attempt }}

  build:
    runs-on: ${{ matrix.os }}
    needs: [submodule_cache]
    strategy:
      matrix:
        os:     [ubuntu-22.04, ubuntu-24.04]
        mode:   [newlib, linux, musl, uclibc]
        target: [rv32gc-ilp32d, rv64gc-lp64d]
        compiler: [gcc, llvm]
        exclude:
          - mode: musl
            compiler: llvm
          - mode: uclibc
            compiler: llvm
    steps:
      - uses: actions/checkout@v4

      - name: Remove unneeded frameworks to recover disk space
        run: sudo ./.github/cleanup-rootfs.sh

      - name: install dependencies
        run: sudo ./.github/setup-apt.sh

      - name: Load submodule cache
        uses: actions/cache/restore@v4
        with:
          path: |
            binutils
            gcc
            gdb
            glibc
            llvm
            musl
            newlib
            uclibc-ng
            qemu
            dejagnu
            .git/modules
          key: submodule-cache-${{ github.run_id }}-${{ github.run_attempt }}

      - name: build toolchain
        run: |
          TARGET_TUPLE=($(echo ${{ matrix.target }} | tr "-" "\n"))
          BUILD_TOOLCHAIN="./configure --prefix=/mnt/riscv --with-arch=${TARGET_TUPLE[0]} --with-abi=${TARGET_TUPLE[1]}"
          if [ "${{ matrix.compiler }}" == "llvm" ]; then # build toolchain with llvm
            $BUILD_TOOLCHAIN --enable-llvm
          else
            $BUILD_TOOLCHAIN
          fi
          sudo mkdir /mnt/riscv
          sudo chown runner:runner /mnt/riscv
          make -j $(nproc) ${{ matrix.mode }}

      - name: tarball build
        run: |
          du -s -h /mnt/riscv
          ./.github/dedup-dir.sh /mnt/riscv/
          XZ_OPT="-e -T0" tar cvJf riscv.tar.xz -C /mnt/ riscv/

      - name: make report
        if: |
          matrix.os == 'ubuntu-24.04'
          && (matrix.mode == 'linux' || matrix.mode == 'newlib')
          && matrix.compiler == 'gcc'
        run: |
          make report-${{ matrix.mode }} -j $(nproc)

      - name: generate prebuilt toolchain name
        id:   toolchain-name-generator
        run: |
          if [[ "${{ matrix.target }}" == *"32"* ]]; then BITS=32; else BITS=64; fi
          case "${{ matrix.mode }}" in
            "linux")
              MODE="glibc";;
            "musl")
              MODE="musl";;
            "uclibc")
              MODE="uclibc-ng";;
            *)
              MODE="elf";;
          esac
          echo "TOOLCHAIN_NAME=riscv$BITS-$MODE-${{ matrix.os }}-${{ matrix.compiler }}-nightly" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.toolchain-name-generator.outputs.TOOLCHAIN_NAME }}
          path: riscv.tar.xz

  test-sim:
    runs-on: ${{ matrix.os }}
    needs: [submodule_cache]
    strategy:
      matrix:
        os:     [ubuntu-24.04]
        mode:   [newlib]
        target: [rv64gc-lp64d]
        sim:    [spike]
    steps:
      - uses: actions/checkout@v4

      - name: Remove unneeded frameworks to recover disk space
        run: sudo ./.github/cleanup-rootfs.sh

      - name: install dependencies
        run: sudo ./.github/setup-apt.sh

      - name: Load submodule cache
        uses: actions/cache/restore@v4
        with:
          path: |
            binutils
            gcc
            gdb
            glibc
            llvm
            musl
            newlib
            uclibc-ng
            qemu
            dejagnu
            .git/modules
          key: submodule-cache-${{ github.run_id }}-${{ github.run_attempt }}

      - name: build toolchain
        run: |
          TARGET_TUPLE=($(echo ${{ matrix.target }} | tr "-" "\n"))
          ./configure --prefix=/mnt/riscv --with-arch=${TARGET_TUPLE[0]} --with-abi=${TARGET_TUPLE[1]} --with-sim=${{ matrix.sim }}
          sudo mkdir /mnt/riscv
          sudo chown runner:runner /mnt/riscv
          make -j $(nproc) ${{ matrix.mode }}

      - name: make report
        run: make report-${{ matrix.mode }} -j $(nproc)

  build-multilib:
    if: ${{ false }} # Disable until multilib errors are triaged
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:     [ubuntu-24.04]
        mode:   [newlib, linux]
        target: [rv64gc-lp64d]
    steps:
      - name: Remove unneeded frameworks to recover disk space
        run: |
          echo "-- Before --"
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          echo "-- After --"
          df -h

      - uses: actions/checkout@v4

      - name: install dependencies
        run: sudo ./.github/setup-apt.sh

      - name: build toolchain
        run: |
          TARGET_TUPLE=($(echo ${{ matrix.target }} | tr "-" "\n"))
          ./configure --prefix=/mnt/riscv --with-arch=${TARGET_TUPLE[0]} --with-abi=${TARGET_TUPLE[1]} --enable-multilib
          sudo mkdir /mnt/riscv
          sudo chown runner:runner /mnt/riscv
          make -j $(nproc) ${{ matrix.mode }}

      - name: make report
        run: |
          sudo make report-${{ matrix.mode }} -j $(nproc)

      - name: tarball build
        run: |
          ./.github/dedup-dir.sh /mnt/riscv/
          XZ_OPT="-e -T0" tar cvJf riscv.tar.xz -C /mnt/ riscv/

      - name: generate prebuilt toolchain name
        id:   toolchain-name-generator
        run: |
          if [[ "${{ matrix.target }}" == *"32"* ]]; then BITS=32; else BITS=64; fi
          case "${{ matrix.mode }}" in
            "linux")
              MODE="glibc";;
            "musl")
              MODE="musl";;
            "uclibc")
              MODE="uclibc-ng";;
            *)
              MODE="elf";;
          esac
          echo "TOOLCHAIN_NAME=riscv$BITS-$MODE-${{ matrix.os }}-multilib-nightly" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.toolchain-name-generator.outputs.TOOLCHAIN_NAME }}
          path: riscv.tar.xz
